import{ao as p,A as a,j as o,r as g,e as s,f as m,C as l}from"./vendor-11df6bed.js";import{f as c,u as n}from"./LayerView-961803d3.js";import{i as d}from"./GraphicContainer-fecfc508.js";import{a as u}from"./GraphicsView2D-5bd192b2.js";import"./Container-de38d099.js";import"./definitions-19bfb61c.js";import"./enums-64ab819c.js";import"./Texture-2f24cda9.js";import"./color-d8d2550b.js";import"./enums-55085e26.js";import"./VertexElementDescriptor-2925c6af.js";import"./BaseGraphicContainer-ae6cdfd4.js";import"./FeatureContainer-3432dbbd.js";import"./AttributeStoreView-8bab5de7.js";import"./TiledDisplayObject-aee2a543.js";import"./visualVariablesUtils-bc5c2c3e.js";import"./visualVariablesUtils-c63c72d7.js";import"./VertexArrayObject-c3d25870.js";import"./TileContainer-c8ed73ab.js";import"./WGLContainer-96c991fa.js";import"./ProgramTemplate-7ff05b5e.js";import"./MaterialKey-c121b999.js";import"./utils-6f2426a8.js";import"./StyleDefinition-fbc907c2.js";import"./config-1337d16e.js";import"./GeometryUtils-dd03fc25.js";import"./earcut-61f7b102.js";import"./vec3f32-ad1dc57f.js";import"./ExpandedCIM-1cbb5011.js";import"./BidiEngine-836b7ef6.js";import"./GeometryUtils-53652037.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-0e6c7a03.js";import"./floatRGBA-f4174ddc.js";import"./normalizeUtilsSync-480575f5.js";import"./projectionSupport-3d541642.js";import"./json-48e3ea08.js";import"./Matcher-b336d0ac.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-e8852853.js";import"./schemaUtils-e883a2a2.js";import"./util-5a4e1580.js";import"./ComputedAttributeStorage-67b26338.js";import"./arcadeTimeUtils-3de6b6bd.js";import"./executionError-fb3f283a.js";import"./centroid-d3ae0e65.js";const w={remove(){},pause(){},resume(){}};let e=class extends c(n){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new u({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new d(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler))}detach(){this.container.removeAllChildren(),this.graphicsView=p(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){return this.graphicsView?this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate):[]}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof a?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(h=>h&&h.uid):o.isCollection(i)&&i.length>0&&(t=i.map(h=>h&&h.uid).toArray());const r=t==null?void 0:t.filter(g);return r!=null&&r.length?(this._addHighlight(r),{remove:()=>this._removeHighlight(r)}):w}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t);this._highlightIds.set(t,r+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t)-1;r===0?this._highlightIds.delete(t):this._highlightIds.set(t,r)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};s([m()],e.prototype,"graphicsView",void 0),e=s([l("esri.views.2d.layers.GraphicsLayerView2D")],e);const gi=e;export{gi as default};
