import{R as l,en as w,eo as h}from"./vendor-CBH3cTFe.js";function a(e){var t;return Array.isArray(e)?(t=e[0])==null?void 0:t.spatialReference:e==null?void 0:e.spatialReference}function p(e){return e&&(Array.isArray(e)?e.map(p):e.toJSON?e.toJSON():e)}function c(e){return Array.isArray(e)?e.map(t=>w(t)):w(e)}function S(e,t){let n;return Array.isArray(e)?n=e:(n=[],n.push(e),t!=null&&n.push(t)),n}let f;async function d(){return f||(f=h("geometryEngineWorker",{strategy:"distributed"})),f}async function r(e,t){return(await d()).invoke("executeGEOperation",{operation:e,parameters:p(t)})}async function m(e,t){const n=await d();return Promise.all(n.broadcast("executeGEOperation",{operation:e,parameters:p(t)}))}function x(e){return r("extendedSpatialReferenceInfo",[e])}async function A(e,t){return c(await r("clip",[a(e),e,t]))}async function O(e,t){return c(await r("cut",[a(e),e,t]))}function D(e,t){return r("contains",[a(e),e,t])}function J(e,t){return r("crosses",[a(e),e,t])}function N(e,t,n){return r("distance",[a(e),e,t,n])}function L(e,t){return r("equals",[a(e),e,t])}function T(e,t){return r("intersects",[a(e),e,t])}function V(e,t){return r("touches",[a(e),e,t])}function v(e,t){return r("within",[a(e),e,t])}function E(e,t){return r("disjoint",[a(e),e,t])}function b(e,t){return r("overlaps",[a(e),e,t])}function z(e,t,n){return r("relate",[a(e),e,t,n])}function H(e){return r("isSimple",[a(e),e])}async function I(e){return c(await r("simplify",[a(e),e]))}async function P(e,t=!1){return c(await r("convexHull",[a(e),e,t]))}async function j(e,t){return c(await r("difference",[a(e),e,t]))}async function k(e,t){return c(await r("symmetricDifference",[a(e),e,t]))}async function q(e,t){return c(await r("intersect",[a(e),e,t]))}async function B(e,t=null){const n=S(e,t);return c(await r("union",[a(n),n]))}async function C(e,t,n,i,s,u){return c(await r("offset",[a(e),e,t,n,i,s,u]))}async function G(e,t,n,i=!1){const s=[a(e),e,t,n,i];return c(await r("buffer",s))}async function $(e,t,n,i,s,u){const g=[a(e),e,t,n,i,s,u];return c(await r("geodesicBuffer",g))}async function W(e,t,n=!0){const i=await r("nearestCoordinate",[a(e),e,t,n]);return{...i,coordinate:l.fromJSON(i.coordinate)}}async function F(e,t){const n=await r("nearestVertex",[a(e),e,t]);return{...n,coordinate:l.fromJSON(n.coordinate)}}async function K(e,t,n,i){return(await r("nearestVertices",[a(e),e,t,n,i])).map(s=>({...s,coordinate:l.fromJSON(s.coordinate)}))}function y(e){var t;return"xmin"in e?e.center:"x"in e?e:(t=e.extent)==null?void 0:t.center}async function M(e,t,n){if(e==null)throw new o;const i=e.spatialReference;if((n=n??y(e))==null)throw new o;const s=e.constructor.fromJSON(await r("rotate",[i,e,t,n]));return s.spatialReference=i,s}async function Q(e,t){if(e==null)throw new o;const n=e.spatialReference;if((t=t??y(e))==null)throw new o;const i=e.constructor.fromJSON(await r("flipHorizontal",[n,e,t]));return i.spatialReference=n,i}async function U(e,t){if(e==null)throw new o;const n=e.spatialReference;if((t=t??y(e))==null)throw new o;const i=e.constructor.fromJSON(await r("flipVertical",[n,e,t]));return i.spatialReference=n,i}async function X(e,t,n,i){return c(await r("generalize",[a(e),e,t,n,i]))}async function Y(e,t,n){return c(await r("densify",[a(e),e,t,n]))}async function Z(e,t,n,i=0){return c(await r("geodesicDensify",[a(e),e,t,n,i]))}function _(e,t){return r("planarArea",[a(e),e,t])}function ee(e,t){return r("planarLength",[a(e),e,t])}function te(e,t,n){return r("geodesicArea",[a(e),e,t,n])}function ne(e,t,n){return r("geodesicLength",[a(e),e,t,n])}async function re(e,t){return c(await r("intersectLinesToPoints",[a(e),e,t]))}async function ae(e,t){await m("changeDefaultSpatialReferenceTolerance",[e,t])}async function ie(e){await m("clearDefaultSpatialReferenceTolerance",[e])}class o extends Error{constructor(){super("Illegal Argument Exception")}}export{G as buffer,ae as changeDefaultSpatialReferenceTolerance,ie as clearDefaultSpatialReferenceTolerance,A as clip,D as contains,P as convexHull,J as crosses,O as cut,Y as densify,j as difference,E as disjoint,N as distance,L as equals,x as extendedSpatialReferenceInfo,Q as flipHorizontal,U as flipVertical,X as generalize,te as geodesicArea,$ as geodesicBuffer,Z as geodesicDensify,ne as geodesicLength,q as intersect,re as intersectLinesToPoints,T as intersects,H as isSimple,W as nearestCoordinate,F as nearestVertex,K as nearestVertices,C as offset,b as overlaps,_ as planarArea,ee as planarLength,z as relate,M as rotate,I as simplify,k as symmetricDifference,V as touches,B as union,v as within};
