import{af as p,s,D as i}from"./vendor-97e3022f.js";import{l as n}from"./MeshVertexAttributes-e952fd4c.js";import{M as a}from"./vertexSpaceConversion-071044e1.js";import"./mat3f64-e19cdcb8.js";import"./mat4f64-9a8384aa.js";import"./spatialReferenceEllipsoidUtils-e15aaa16.js";import"./computeTranslationToOriginAndRotation-5383511e.js";import"./meshVertexSpaceUtils-8cc745bc.js";import"./MeshLocalVertexSpace-42092399.js";import"./vec3-48d5311f.js";import"./projection-1eaee7cb.js";import"./DoubleArray-0a89b142.js";import"./BufferView-f35119c1.js";import"./vec4-006d03d4.js";async function S(t,r,m){await Promise.resolve(),p(m);const o=a(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{S as convertMeshVertexSpace};
