import{d1 as p,s,a0 as i}from"./vendor-CBH3cTFe.js";import{l as n}from"./MeshVertexAttributes-Bhl-N5Ou.js";import{M as a}from"./vertexSpaceConversion-DYoXfOqS.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-C14md-7y.js";import"./computeTranslationToOriginAndRotation-QXkflhuj.js";import"./meshVertexSpaceUtils-DKl-rLSm.js";import"./MeshLocalVertexSpace-BN19Pzar.js";import"./vec3-BE23XtJe.js";import"./projection-DLjxsJeD.js";import"./DoubleArray-DcEBcgEx.js";import"./BufferView-DwCQKWwp.js";import"./vec4-Dq-D5tLd.js";async function S(t,r,m){await Promise.resolve(),p(m);const o=a(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{S as convertMeshVertexSpace};
